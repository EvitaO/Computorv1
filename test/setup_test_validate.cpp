#include "gtest/gtest.h"
#include "validate.hpp"

TEST(setup, ValidInput){
    validate a("3 * X^1 + 21.34 * X^0 = 1 * X^2");
    EXPECT_NO_THROW(a.setup());
    validate b("0 * X^2 = 1 * X^1 - 5 * X^1");
    EXPECT_NO_THROW(b.setup());
    validate c("2.3 * X^1 - 9.8 * X^1 = 5 * X^2 + 3.333 * X^1");
    EXPECT_NO_THROW(c.setup());
    validate d("3 * X^1 = - 4 * X^0 - 2 * X^2");
    EXPECT_NO_THROW(d.setup());
    validate e("3 * X^1 = 0");
    EXPECT_NO_THROW(e.setup());
    validate f("3 * X^0 = 2 * X^1 + 1.73538 * X^2");
    EXPECT_NO_THROW(f.setup());
    validate g("3 * X^0 = 2 * X^0");
    EXPECT_NO_THROW(g.setup());
    validate h("3 * X^3 = 0");
    EXPECT_NO_THROW(h.setup());
    validate i("2 * X^2 = 7.35 * X^1");
    EXPECT_NO_THROW(i.setup());
    validate j("2 * X^1 = 10.01 * X^1 + 3.8 * X^1");
    EXPECT_NO_THROW(j.setup());
    validate k("45.234 * X^1 - 2 * X^2 = - 2 * X^2 + 3.35 * X^1");
    EXPECT_NO_THROW(k.setup());
    validate l("- 9.3 * X^1 + 2 * X^2 = 0.1 * X^1 + .3 * X^1");
    EXPECT_NO_THROW(l.setup());
    validate m(".3 * X^1 = 3 * X^2");
    EXPECT_NO_THROW(m.setup());
    validate n("3 * X^1 - 1 * X^1 = 7.5 * X^2 - 1.11 * X^1");
    EXPECT_NO_THROW(n.setup());
    validate o("1 * X^1 = 3 * X^1");
    EXPECT_NO_THROW(o.setup());
    validate p("2 * X^1 = - 5 * X^1");
    EXPECT_NO_THROW(p.setup());
    validate q("3 * X^0 = 2.123 * X^2");
    EXPECT_NO_THROW(q.setup());
    validate r("24 * X^1 = 2 * X^1 - 8 * X^1");
    EXPECT_NO_THROW(r.setup());
    validate s("3 * X^1 = 24 * X^1");
    EXPECT_NO_THROW(s.setup());
    validate t("3 * X^2 = 5 * X^0");
    EXPECT_NO_THROW(t.setup());
    validate u("23 * X^2 = 0");
    EXPECT_NO_THROW(u.setup());
    validate v("7 * X^1 = 24 * X^1 + 2 * X^0");
    EXPECT_NO_THROW(v.setup());
    validate w("3 * X^2 - 13 * X^1 = 2 * X^2");
    EXPECT_NO_THROW(w.setup());
    validate x("3 * X^2 = - 1 * X^1 + 0.5 * X^3 + 16 * X^2");
    EXPECT_NO_THROW(x.setup());
    validate y("3.23 * X^2 - 1 * X^1 = 7 * X^1 - 0 * X^0");
    EXPECT_NO_THROW(y.setup());
    validate z("3 * X^0 = 1.78 * X^1");
    EXPECT_NO_THROW(z.setup());
}

TEST(setup, InvalidInput){
    validate a("3 * X^1 ++ 21.34 * X^0 = 1 * X^2");
    EXPECT_THROW(a.setup(), std::exception);
    validate b("0 * X^2 = 1 * X^1 +- 5 * X^1");
    EXPECT_THROW(b.setup(), std::exception);
    validate c(". * X^1 = 3 * X^2");
    EXPECT_THROW(c.setup(), std::exception);
    validate d("3 * X^1 = a");
    EXPECT_THROW(d.setup(), std::exception);
    validate e("a3 * X^1 = 0");
    EXPECT_THROW(e.setup(), std::exception);
    validate f("3a * X^0 = 2a");
    EXPECT_THROW(f.setup(), std::exception);
    validate g("3 = 5");
    EXPECT_THROW(g.setup(), std::exception);
    validate h("3 * 2^1.3 = 1");
    EXPECT_THROW(h.setup(), std::exception);
    validate i("3\2 * X^2 = 0");
    EXPECT_THROW(i.setup(), std::exception);
    validate j("3 * 2 * X^1; = 0");
    EXPECT_THROW(j.setup(), std::exception);
    validate k("\n");
    EXPECT_THROW(k.setup(), std::exception);
    validate l("");
    EXPECT_THROW(l.setup(), std::exception);
    validate m("7 * X^1 = 0.5");
    EXPECT_THROW(m.setup(), std::exception);
    validate n("3 -- X^1 = 0");
    EXPECT_THROW(n.setup(), std::exception);
    validate o("1 * X^1 = 3 * + X^1");
    EXPECT_THROW(o.setup(), std::exception);
    validate p("2 * X^1 == - 5 8 X^1");
    EXPECT_THROW(p.setup(), std::exception);
    validate q("3 * X^0 = 2^2 * X^2");
    EXPECT_THROW(q.setup(), std::exception);
    validate r("24 * X^1 = 2 * X^1 - 8 * X^^1");
    EXPECT_THROW(r.setup(), std::exception);
    validate s("3 (* X^1 = 24 * X^1");
    EXPECT_THROW(s.setup(), std::exception);
    validate t("3 * 2X = 5 * X^0");
    EXPECT_THROW(t.setup(), std::exception);
    validate u("3 * X2 = 0");
    EXPECT_THROW(u.setup(), std::exception);
    validate v("7 * X^1 = 24 * 2");
    EXPECT_THROW(v.setup(), std::exception);
    validate w("3 * X^2 - 13 * X^1");
    EXPECT_THROW(w.setup(), std::exception);
    validate x("3 * X^2 = - 1 * X^1 + 0.5 * X^3 = 16 * X^2");
    EXPECT_THROW(x.setup(), std::exception);
    validate y("3.23 * X^2 - X^1 = 7 * X^1 - 0 * X^0");
    EXPECT_THROW(y.setup(), std::exception);
    validate z("3 * X^0 = 1.78 ** X^1");
    EXPECT_THROW(z.setup(), std::exception);
}